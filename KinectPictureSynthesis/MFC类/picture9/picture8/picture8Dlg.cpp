
// picture8Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "picture8.h"
#include "picture8Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// Cpicture8Dlg 对话框




Cpicture8Dlg::Cpicture8Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(Cpicture8Dlg::IDD, pParent)
	, m_nNumberScenarios(0)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void Cpicture8Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT1, m_nNumberScenarios);
}

BEGIN_MESSAGE_MAP(Cpicture8Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_CHECK1, &Cpicture8Dlg::OnBnClickedCheck1)
	ON_BN_CLICKED(IDC_BUTTON1, &Cpicture8Dlg::OnBnClickedButton1)
	ON_WM_TIMER()
END_MESSAGE_MAP()


// Cpicture8Dlg 消息处理程序

BOOL Cpicture8Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	//初始化kinect
	kinect = NULL;
	HRESULT hr = S_OK;
	hr = GetDefaultKinectSensor(&kinect);  //  得到默认的设备  

	if (FAILED(hr) || kinect == NULL)
	{
		//cout << "创建 sensor 失败\n";
		//return;
	}
	if (kinect->Open() != S_OK) // 是否打开成功  
	{
		//cout << "Kinect sensor 没准备好\n";
		//return;
	}

	this->mC.Open(kinect);
	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	isPrint = false;  //默认为二级窗口不是打印模式
	//myDlg = new Dlg2();   //创建一个非模态对话框，为二级窗口
	//myDlg->Create(IDD_SECOND_DEGREE);  
	
	SetTimer(1, 33, nullptr);
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void Cpicture8Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void Cpicture8Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR Cpicture8Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


//一级窗口选框的响应函数，在选框中勾选则进入打印模式，将isPrint设为true
void Cpicture8Dlg::OnBnClickedCheck1()  
{
	// TODO: 在此添加控件通知处理程序代码
	isPrint = !isPrint;
	//myDlg.wetherPrint = isPrint;  //设置二级窗口对象中的成员变量wetherPrint，wetherPrint用于二级窗口标记自己是否为打印模式
}

//一级窗口中“start”按钮的响应函数
void Cpicture8Dlg::OnBnClickedButton1()  
{
	// TODO: 在此添加控件通知处理程序代码
	
		//myDlg.ShowWindow(SW_SHOW); //显示非模态对话框 
		Dlg2 myDlg;
		myDlg.wetherPrint = isPrint;
		UpdateData();
		myDlg.numberScenarios = this->m_nNumberScenarios;
		UpdateData(false);
		myDlg.DoModal();
		//myDlg.wetherPrint = isPrint;
		//myDlg.SetTimer(1,33,NULL);
	
}


//void Cpicture8Dlg::doDrawPicture(void) 
//{
//	myDlg.drawPicture();
//}


void Cpicture8Dlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO:  在此添加消息处理程序代码和/或调用默认值
	this->mC.KinectMouseControl();

	CDialogEx::OnTimer(nIDEvent);
}
